package com.desafiolgico.information

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.viewpager2.widget.ViewPager2
import com.desafiolgico.R
import com.desafiolgico.databinding.ActivityOnboardingBinding
import com.desafiolgico.main.UserProfileActivity
import com.google.android.material.tabs.TabLayout
import com.google.android.material.tabs.TabLayoutMediator

class OnboardingActivity : AppCompatActivity() {

    private lateinit var binding: ActivityOnboardingBinding
    private lateinit var onboardingAdapter: OnboardingAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityOnboardingBinding.inflate(layoutInflater)
        setContentView(binding.root)

        findViewById<TabLayout>(R.id.tabLayout)
        findViewById<ViewPager2>(R.id.viewPager)

        // Recuperar o n√≠vel do Intent
        val level = intent.getStringExtra("LEVEL") ?: "Iniciante"

        // Configurar os itens do onboarding com base no n√≠vel
        val onboardingItems = getOnboardingItems(level)
        onboardingAdapter = OnboardingAdapter(onboardingItems)
        binding.viewPager.adapter = onboardingAdapter

        // Configurar o TabLayout com o ViewPager
        TabLayoutMediator(binding.tabLayout, binding.viewPager) { tab, position ->
            tab.text = when (position) {
                0 -> "Introdu√ß√£o"
                1 -> "Funcionalidades"
                2 -> "N√≠veis e Regras"
                else -> "Aba $position"
            }
            tab.contentDescription = tab.text // Para acessibilidade
        }.attach()

        // Configurar bot√µes de navega√ß√£o
        setupNavigationButtons()
    }

    /**
     * Retorna os itens do onboarding com base no n√≠vel selecionado.
     */
    private fun getOnboardingItems(level: String): List<OnboardingItem> {
        val descriptionLevelSpecific = when (level) {
            "Iniciante" -> "Este √© o melhor lugar para come√ßar sua jornada."
            "Intermedi√°rio" -> "Aqui est√° um novo desafio para aprimorar suas habilidades."
            "Avan√ßado" -> "Prepare-se para testar seu limite com desafios intensos."
            else -> "Escolha um n√≠vel para uma experi√™ncia personalizada."
        }

        return listOf(
            OnboardingItem(
                R.drawable.onboarding_image1,
                "Bem-vindo",
                """
                üß† Descubra as funcionalidades do nosso aplicativo!
                $descriptionLevelSpecific
                
                üéØ Como funciona?
                - Escolha o n√≠vel de dificuldade: Iniciante, Intermedi√°rio ou Avan√ßado.
                - Responda perguntas cuidadosamente elaboradas, explorando diversos temas e assuntos.
                - Cada quest√£o apresenta 4 alternativas, mas apenas uma √© correta.
                ‚è≥ Lembre-se: Responda antes que o cron√¥metro acabe! Pense r√°pido e demonstre seu conhecimento.
                üéâ Jogue agora e descubra o quanto voc√™ sabe! Boa sorte! üçÄ
                """.trimIndent()
            ),
            OnboardingItem(
                R.drawable.onboarding_image2,
                "Funcionalidades Principais",
                """
                üîπ **In√≠cio do Jogo:**
                - Selecione o n√≠vel de dificuldade e comece a responder as perguntas.
                - A primeira pergunta aparece com quatro op√ß√µes de resposta.

                ‚úÖ Respondendo Perguntas:
                - Escolha sua resposta.
                - Resposta correta: bot√£o verde e som de acerto.
                - Resposta incorreta: bot√£o vermelho e som de erro.
                ‚è∞ Tempo Limite:
                - Caso o tempo acabe, a pergunta ser√° considerada incorreta.
                üèÜ Fim do Jogo:
                - Ao errar o n√∫mero m√°ximo permitido, o jogo reinicia.
                - Veja sua pontua√ß√£o final e recomece!
                """.trimIndent()
            ),
            OnboardingItem(
                R.drawable.onboarding_image3,
                "N√≠veis e Regras",
                """
                üìä N√≠veis de Dificuldade:
                - Iniciante: Erre at√© 5 perguntas antes de perder.
                - Intermedi√°rio: Erre at√© 3 perguntas antes de perder.
                - Avan√ßado: Erre at√© 2 perguntas antes de perder.

                ‚è±Ô∏è Tempo de Resposta:
                - Iniciante e Intermedi√°rio: Cada pergunta tem at√© 30 segundos para ser respondida.
                - Avan√ßado: O tempo √© mais desafiador, com apenas 20 segundos por pergunta.
                üí™ Pronto para come√ßar?
                Jogue agora e desafie seus conhecimentos! üéÆ
                """.trimIndent()
            )
        )
    }

    /**
     * Configura os bot√µes de navega√ß√£o do onboarding.
     */
    // Listener para anima√ß√£o no bot√£o "Pr√≥ximo"
    private fun setupNavigationButtons() {
        binding.btnNext.setOnClickListener {
            val currentItem = binding.viewPager.currentItem
            if (currentItem + 1 < onboardingAdapter.itemCount) {
                animateToNextPage(currentItem)
            } else {
                navigateToMainActivity()
            }
        }

        // Configurar listener do grupo de bot√µes
        binding.buttonToggleGroup.addOnButtonCheckedListener { _, checkedId, isChecked ->
            if (isChecked) {
                when (checkedId) {
                    R.id.btnSkip -> navigateToMainActivity()
                }
            }
        }

        // Registrar mudan√ßas no ViewPager
        binding.viewPager.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
            override fun onPageSelected(position: Int) {
                super.onPageSelected(position)
                binding.btnNext.text = if (position == onboardingAdapter.itemCount - 1) {
                    "Concluir"
                } else {
                    "Pr√≥ximo"
                }
            }
        })
    }

    // Anima√ß√£o para avan√ßar p√°ginas
    private fun animateToNextPage(currentItem: Int) {
        binding.viewPager.animate()
            .alpha(0f)
            .setDuration(200)
            .withEndAction {
                binding.viewPager.currentItem = currentItem + 1
                binding.viewPager.animate()
                    .alpha(1f)
                    .setDuration(200)
                    .start()
            }
            .start()
    }

    // Navegar para a UserProfileActivity
    private fun navigateToMainActivity() {
        Intent(this, UserProfileActivity::class.java).apply {
            startActivity(this)
            finish()
        }
    }
}
